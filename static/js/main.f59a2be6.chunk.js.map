{"version":3,"sources":["Header.js","lib/TimeUnits.js","Timer/Display.js","Timer/Controls.js","Timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","TimeUnits","seconds","hours","Math","floor","minutes","secs","concat","Display","secondsToClock","time","status","onChange","event","target","value","children","Controls","type","onClick","startTimer","stopTimer","resetTimer","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputSeconds","bind","assertThisInitialized","setState","_this2","interval","setInterval","clearInterval","Timer_Display","Timer_Controls","Component","propType","PropTypes","number","isRequired","string","App","src_Header","src_Timer_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f59a2be6.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles/Header.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Header = props => {\r\n  return (\r\n    <div className=\"header nav\">\r\n      <h3> {props.title} </h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n    title : PropTypes.string\r\n}\r\n\r\nexport default Header\r\n\r\n","export default class TimeUnits{\r\n\r\n    static secondsToClock(seconds){\r\n        var hours = Math.floor(seconds / 3600)\r\n        var minutes = Math.floor((seconds - (hours * 3600)) / 60)\r\n        var secs = Math.floor(seconds - (hours * 3600) - (minutes * 60))\r\n\r\n        return `${10 > hours ? '0' + hours : hours} : \r\n        ${10 > minutes ? '0' + minutes : minutes} : \r\n        ${10 > secs ? '0' + secs : secs}`\r\n    }\r\n    \r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeUnits from '../lib/TimeUnits'\r\nimport '../styles/Display.scss'\r\n\r\nconst Display = props => {\r\n\r\n    return (\r\n      <div className=\"display\">\r\n        {TimeUnits.secondsToClock(props.time)}\r\n\r\n        {props.status !== 'started' &&\r\n          <input className=\"input\" \r\n            onChange={event => props.onChange(event.target.value)} \r\n            value={props.time}/>}\r\n\r\n        {props.children}\r\n      \r\n      </div>\r\n    )\r\n}\r\n\r\nDisplay.propTypes = {\r\n  time : PropTypes.number.isRequired,\r\n  status : PropTypes.string\r\n}\r\n\r\nexport default Display","import React from 'react'\r\nimport '../styles/Controls.scss'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Controls = props => {\r\n  return (\r\n    <div>\r\n      {props.status !== 'started' \r\n      && <button type=\"button\" className=\"buttons btn btn-success\"\r\n      onClick={props.startTimer}> \r\n        Start\r\n      </button>}\r\n\r\n      {props.status === 'started'\r\n      && <button type=\"button\" className=\"buttons btn btn-secondary\"\r\n      onClick={props.stopTimer}>\r\n        Stop\r\n      </button>}\r\n      \r\n      <button className=\"buttons btn btn-primary\"\r\n      onClick={props.resetTimer}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nControls.propTypes = {\r\n  status : PropTypes.string\r\n}\r\n\r\nexport default Controls","import React, { Component } from 'react'\r\nimport Display from './Display'\r\nimport Controls from './Controls'\r\nimport PropTypes from 'prop-types'\r\nimport '../styles/Timer.scss'\r\n\r\nclass Timer extends Component {\r\n    constructor(){\r\n        super()\r\n\r\n        this.state ={\r\n            seconds : 0,\r\n            status : 'stopped'\r\n        }\r\n\r\n        this.inputSeconds = this.inputSeconds.bind(this)\r\n        this.startTimer = this.startTimer.bind(this)\r\n        this.stopTimer = this.stopTimer.bind(this)\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n    }\r\n\r\n  inputSeconds(secs){\r\n    this.setState({seconds : secs})\r\n  }\r\n\r\n  startTimer(){\r\n    if (this.state.status !== 'started'){\r\n      this.setState({status : 'started'})\r\n\r\n      this.interval = setInterval(() =>{\r\n\r\n        if (this.state.seconds > 0){\r\n          this.setState({seconds : this.state.seconds - 1})\r\n        } else {\r\n          this.setState({seconds : 0, status : null})\r\n          clearInterval(this.interval)\r\n        }\r\n        \r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  stopTimer(){\r\n    this.setState({status : 'stopped'})\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  resetTimer(){\r\n    this.setState({seconds : 0, status : 'stopped'})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        <Display \r\n        time={this.state.seconds}\r\n        onChange={this.inputSeconds}\r\n        status={this.state.status}>\r\n\r\n          <Controls \r\n          startTimer={this.startTimer}\r\n          stopTimer={this.stopTimer}\r\n          resetTimer={this.resetTimer}\r\n          status={this.state.status}/>\r\n\r\n        </Display>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTimer.propType = {\r\n  seconds : PropTypes.number.isRequired,\r\n  status : PropTypes.string\r\n}\r\n\r\nexport default Timer","import React, { Component } from 'react'\r\nimport Header from './Header';\r\nimport Timer from './Timer/Timer'\r\nimport './styles/App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n\r\n    this.state={\r\n      title : '‚è∞ React Timer'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header title={this.state.title}/>\r\n        <Timer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}